spring:
  profiles: development
  application:
    name: music-service
  cloud:
    config:
      uri: http://localhost:8888
      discovery:
        enabled: false
      enabled: false
  jpa:
    show_sql: true
    hibernate:
      ddl-auto: validate
    database: POSTGRESQL
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
    open-in-view: false
  datasource:
    url: jdbc:postgresql://localhost:5440/musicdb
    username: sysadm
    password: sysadm
    driver-class-name: org.postgresql.Driver
    tomcat:
      default-auto-commit: false
    dbcp:
      default-auto-commit: false
    hikari:
      auto-commit: false
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 200MB
  mvc:
    async:
      request-timeout: 3600s
  session:
    timeout: 3600s
  transaction:
    default-timeout: 3600s
server:
  port: 9008
  connection-timeout: -1s
  session:
    timeout: 3600s
eureka:
  instance:
    hostname: video-service
    leaseRenewalIntervalInSeconds: 1
    leaseExpirationDurationInSeconds: 2
    prefer-ip-address: true
    nonSecurePort: ${server.port}
  client:
    registerWithEureka: true
    fetchRegistry: true
    eureka-connection-idle-timeout-seconds: 3000
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    enabled: true
    eureka-server-read-timeout-seconds: 5000
ribbon:
  ReadTimeout: 18000000
  ConnectTimeout: 18000000
  eureka:
    enabled: true
encrypt:
  failOnError: false
management:
  metrics:
    web:
      server:
        auto-time-requests: true
    export:
      elastic:
        host: http://localhost:9200
        enabled: true
        step: 1s
        index: metrics
  endpoint:
    health:
      enabled: true
    metrics:
      enabled: true
    auditevents:
      enabled: true
    httptrace:
      enabled: true
    shutdown:
      enabled: true
    restart:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
    enabled-by-default: true

---
spring:
  profiles: docker
  application:
    name: music-service
  cloud:
    config:
      uri: http://config-server:8888
      discovery:
        serviceId: config-server
---
spring:
  profiles: cloud
  application:
    name: music-service
  cloud:
    config:
      uri: http://config-server-mateuszsojka.cfapps.io:8888/
---
spring:
  profiles: test
  application:
    name: music-service
  jpa:
    database: h2
    hibernate:
      ddl-auto: none
  datasource:
    url: jdbc:h2:mem:test;MODE=PostgreSQL
    username: admin
    password: admin
    platform: h2
eureka:
  client:
    enabled: false
server:
  port: 9026
encrypt:
  failOnError: false
logging:
  file: log.txt
  level:
    org:
      springframework:
        web: error
      hibernate: error
